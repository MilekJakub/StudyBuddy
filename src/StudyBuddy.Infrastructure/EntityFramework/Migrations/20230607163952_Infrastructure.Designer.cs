// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudyBuddy.Infrastructure.EntityFramework.Contexts;

#nullable disable

namespace StudyBuddy.Infrastructure.EntityFramework.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230607163952_Infrastructure")]
    partial class Infrastructure
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StudyBuddy.Domain.Projects.Enums.ProjectDifficulty.ProjectDifficulty", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProjectDifficulties", (string)null);

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Difficulty = "Easy"
                        },
                        new
                        {
                            Id = (byte)2,
                            Difficulty = "Medium"
                        },
                        new
                        {
                            Id = (byte)3,
                            Difficulty = "Hard"
                        },
                        new
                        {
                            Id = (byte)4,
                            Difficulty = "Extreme"
                        });
                });

            modelBuilder.Entity("StudyBuddy.Domain.Projects.Enums.ProjectState.ProjectState", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProjectStates", (string)null);

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            State = "Created"
                        },
                        new
                        {
                            Id = (byte)2,
                            State = "FormingTeam"
                        },
                        new
                        {
                            Id = (byte)3,
                            State = "InProgress"
                        },
                        new
                        {
                            Id = (byte)4,
                            State = "Testing"
                        },
                        new
                        {
                            Id = (byte)5,
                            State = "Completed"
                        });
                });

            modelBuilder.Entity("StudyBuddy.Domain.Projects.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<long>("EstimatedTimeToFinish")
                        .HasColumnType("bigint")
                        .HasColumnName("EstimatedTime");

                    b.Property<byte>("ProjectDifficultyId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("ProjectStateId")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Topic");

                    b.HasKey("Id");

                    b.HasIndex("ProjectDifficultyId");

                    b.HasIndex("ProjectStateId");

                    b.HasIndex("TeamId");

                    b.ToTable("Projects", (string)null);
                });

            modelBuilder.Entity("StudyBuddy.Domain.Projects.ValueObjects.ProgrammingLanguage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectProgrammingLanguages", (string)null);
                });

            modelBuilder.Entity("StudyBuddy.Domain.Projects.ValueObjects.ProjectRequirement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Requirement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectRequirements", (string)null);
                });

            modelBuilder.Entity("StudyBuddy.Domain.Projects.ValueObjects.ProjectTechnology", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectTechnologies", (string)null);
                });

            modelBuilder.Entity("StudyBuddy.Domain.Teams.Entities.Membership", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("JoinDate");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Role");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("Memberships", (string)null);
                });

            modelBuilder.Entity("StudyBuddy.Domain.Teams.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Teams", (string)null);
                });

            modelBuilder.Entity("StudyBuddy.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Email");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Firstname");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Lastname");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PasswordHash");

                    b.Property<string>("RegisterNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RegisterNumber");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Role");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Username");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("StudyBuddy.Domain.Projects.Project", b =>
                {
                    b.HasOne("StudyBuddy.Domain.Projects.Enums.ProjectDifficulty.ProjectDifficulty", "ProjectDifficulty")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectDifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudyBuddy.Domain.Projects.Enums.ProjectState.ProjectState", "ProjectState")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudyBuddy.Domain.Teams.Team", "Team")
                        .WithMany("Projects")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectDifficulty");

                    b.Navigation("ProjectState");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("StudyBuddy.Domain.Projects.ValueObjects.ProgrammingLanguage", b =>
                {
                    b.HasOne("StudyBuddy.Domain.Projects.Project", null)
                        .WithMany("ProgrammingLanguages")
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("StudyBuddy.Domain.Projects.ValueObjects.ProjectRequirement", b =>
                {
                    b.HasOne("StudyBuddy.Domain.Projects.Project", null)
                        .WithMany("Requirements")
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("StudyBuddy.Domain.Projects.ValueObjects.ProjectTechnology", b =>
                {
                    b.HasOne("StudyBuddy.Domain.Projects.Project", null)
                        .WithMany("Technologies")
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("StudyBuddy.Domain.Teams.Entities.Membership", b =>
                {
                    b.HasOne("StudyBuddy.Domain.Teams.Team", "Team")
                        .WithMany("Memberships")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudyBuddy.Domain.Users.User", "User")
                        .WithMany("Memberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudyBuddy.Domain.Projects.Enums.ProjectDifficulty.ProjectDifficulty", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("StudyBuddy.Domain.Projects.Enums.ProjectState.ProjectState", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("StudyBuddy.Domain.Projects.Project", b =>
                {
                    b.Navigation("ProgrammingLanguages");

                    b.Navigation("Requirements");

                    b.Navigation("Technologies");
                });

            modelBuilder.Entity("StudyBuddy.Domain.Teams.Team", b =>
                {
                    b.Navigation("Memberships");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("StudyBuddy.Domain.Users.User", b =>
                {
                    b.Navigation("Memberships");
                });
#pragma warning restore 612, 618
        }
    }
}
